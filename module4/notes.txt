Commands syntax:

Command options and arguments
-> Commands typically have the syntax:
command option(s) argument(s)

Options:
-> Modify the way that a command works
-> Usually consist of a hyphen or dash followed by a single letter
-> Some commands accept multiple options which can ususlly be grouped together after a single hyphen

Arguments:
-> Most commands are used together with one or more arguments
-> Some commands assume a default argument if none is supplied
-> Arguments are optional for some commands and required by others.

----------------------------------------------------------------------------------------

File permissions:

-> UNIX is a multi-user system.Every file and dictionary in our account can be protected from or made accessible to other users by changing its access permissions. Every user has responsibility for controlling access to their files.
-> Permissions for a file or directory may be restricted to by types
-> There are 3 types of permissions
  - r -> read
  - w -> write
  - x -> excute=running a program

> Each permission (rwx) can be controlled at three levels:
  - u -> user = yourself
  - g -> group = can be people in the same project
  - o -> other = everyone on the system

-> File or Directory permission can be displayed by running ls-l command
  -> -rwxrwxrwx

-> Command to change permission.
  - chmod


example:

chmod g-w jerry (g-> group)
chmod a-r jerry (a -> all)
chmod u-w jerry (u -> user)
{ here (-) -> means remove permissions}
{here (+) -> means add the permissions}
chmod u+rw jerry 
chmod g+rw jerry

--------------------------------------------------------------------------------------

Permission using numreic mode

-> permissin to a file and directory can also be assigne numerically
  - chmod ugo+r File
  or
  - chmod 444 file

=> The table below assigns numbers to permissions types

Number        permission type             symbol
0             No permmission              ---
1             Execute                     --x
2             write                       -w-
3             execute + write             -wx
4             read                        r--
5             read+execute                r-w
6             read+write                  rw-
7             read+write+execute          rwx

-> online calculator can be used as well
  OWNER       GROUP         PUBLIC
  read        read          read
  write       write         write
  excute      execute       execute

[online change mod calculator]

------------------------------------------------------------------------------------------

File Ownership:

-> There are 2 owners of a file or directory
  - user and group

-> Command to change file Ownership
  - chown and chgrp
    - chown changes the ownership of a file
    - chgrp changes the group ownership of a file

-> Recursive ownership change option (Cascade)
  -> -R 

------------------------------------------------------------------------------------------

Access COntrol List (ACL):

=> What is ACL?
-> Access control list (ACL) provides an additional, more flexible permission mechanism for file systems. It is designed to assist with UNIX file permissions. ACl alows us to give permissions for any user or group to any disc resource.

=> Use of ACl:
-> Think of a scenario in which a particular user is not a member of group created by us but still we want to give some read or write access, how can we do it without making user a member of group, here comes in picture Access Control Lists, ACl helps us to do this trick
-> Basically, ACls are used to make a flexible permission mechanism in linux.
-> From linux man pages, ACls are used to define more fine-grained discretionary access rights for files and directories.
-> Commands to assign and remove ACL permissions are:
  setfacl and getfacl

List of commands for setting up ACL:
1.) To add permission for user
setfacl -m u:user:rwx /path/to/file

2.) To add permissions for a group
setfacl -m g:group:rw /path/to/file

3.) To allow all files or directories to inherit ACL entries from the directories it is within 
setfacl -Rm "entry" /path/to/dir

4.) To remove a specific entry
setfacl -x u:user /path/to/file (for a specific user)

5.) To remov all entries
setfacl -b path/to/file (for all users)

Note:

-> As you assign the ACL permissio to a file/ directory it adds + sign at the end of the permission
-> Setting w permission with ACL does not allow to remove a file

--------------------------------------------------------------------------------------------------

Help commands:

-> There are 3 types of help commands
  -> whatis command
  -> command --help
  -> man command

--------------------------------------------------------------------------------------------------

TAB Completion and Up Arrow:

-> Hitting TAB key completes the available commands, files or directories
  - chm TAB
  - ls j<TAB>
  - cd Des<TAB>

-> Hittig up arrow key on the keyboard returns the last command ran.

-----------------------------------------------------------------------------------------
Adding text to files (Redirects):

-> 3 simple ways to add text to a file
  - vi 
  - Redirect command output > or >>
  - echo > or >>

-----------------------------------------------------------------------------------------
Input and Output Redirects:
-> there are 3 redirects in linux 

  1.) Standard input (stdin) and it has file descriptor number as 0
  2.) Standard output (stdout) and it has file descriptor number as 1
  3.) Standard error (stderr) and it has file descriptor number as 2

Output (stdout) - 1
-> By default when running a command its output goes to the terminal 
-> the output of a command can be routed to a file using > sysmbol
  -> E.g ls -l > listings
         pwd > findpath
-> If using the same file for additional output or to append to the same file then use >>
  -> E.g. ls -la >> listings
          echo "hello world" >. findpath


Input (stdin) - 0:
  -> Input is used when feeding file contents to a file
    e.g. cat < listings
         mail -s "office memo" allusers@abc.com < memoletter

Error (stderr) - 2
  -> when a command is executed we use a keyboard and that is also considered (stdin -0)
  -> That command output goes on the monitor and that output is (stout - 1)
  -> if  the command produced any error on the screen then it is considered (stderr - 2)
    -> we can use redirects to route errors from the screen 
      -> eg ls -l /root 2> errorfile
            telnet localhost 2> errorfile 
-----------------------------------------------------------------------------------------------------------------------------------
Standard Output to a file (tee):

-> "tee" command is ued to store and view (both at the same time) the output of any command
-> the command is named after the T-splitter used in plumbing. it basically breaks the output of a program so that it can be both displayed and saved in a file. It does both the tasks simultaneously, copies the result into the specified files or variables and also display the result.
command -> tee -> stdout

          file

eg. echo "hello from anoohhya"
echo "hello from anoohhya" > test
echo "hello from anoohhya" | tee test
echo "hello from anoohhya 2" | tee -a test {for appending}

-----------------------------------------------------------------------------------------------------------------------------------

Pipes:

-> A pipe is used by the shell to connect the output of one command directly to the input of another command.
-> the sysmbol for a pipe is the vertical bar (|). The command syntax is:

command1 [arguments] | command2 [arguments]
ls -l | more

-> here more is command will show one page at a time

ls -l | tail -1
-> here tail -1 is used to get the last line of the Output

------------------------------------------------------------------------------------------------------------------------------------

File maintenance commands:

-> cp
-> rm
-> mv
-> mkdir
-> rmdir or rm -r
-> chgrp
-> chown

------------------------------------------------------------------------------------------------------------------------------------
File Display commands:

-> cat
-> more
-> less
-> head
-> tail

=> cat is used to display whole content of a file
=> more is used to display one page at a time
=> less is also same as more but j -> used for forward one line, k -> used for backward one line, q-> to quit
=> head is used to display only few top lines of the content.
=> if we want only first 2 lines then {head -2 messages}
=> if we give tail -2 messages then it will display last 2 lines of the file.

------------------------------------------------------------------------------------------------------------------------------------

Filters /text processors commands:

-> cut
-> awk
-> grep and egrep (search by the key words)
-> sort
-> uniq (doest show duplicates)
-> wc 

--------------
cut:
-> Cut is a command line utility that allows us to cut parts of lines from specified files or piped data and print the result to stadard output. It can be used to cut parts of a line by delimiter, byte position and character

-> cut filename = does not works
-> cut --version = check version
-> cut -cl filename = list one character
-> cut -c1,2,4 = pick and chose character
-> cut -c1-3 filename = list range of characters
-> cut -c1-3, 6-8 filename = list specific range of characters
-> cut -b1-3 filename = list by byte size
-> cut -d: -f 6 /etc/passwd = list first 6th column separated by :
-> cut -d: -f 6-7 /etc/passwd = list first 6 and 7th column separated by :
-> ls -l | cut -c2-4 = only print user permissions of files/dir

----------------

aws:
-> awk is a unity/ languag designed for data extraction. most of the time it is used to extract firlds from a file or from an output.
-> awk --version = check version
-> awk '{print $1}' file  = list 1st field from a file
-> ls -l | awk '{print $1, $3}' = list 1 an d3rd field of ls-l output
-> ls -l | awk '{print $NF}' = last field of the output
-> awk '/jerry/ {print}' file = search for a spefic word
-> awk -F: '{print $1}' /etc/passwd = output only 1st field of /etc/passwd
-> echo "hello tom" | awk '{$2="adam"; print $0}' = replace words field words
-> cat file | awk '{$2="imran"; print $0}' = replace words field words
-> awk 'length($0) > 15' file = get lines that have more than 15 byte size
-> ls -l | awk '{if($9 == "seinfeild") print $0;}'  = get the feild matching seinfeild in /home/ec2-user
-> ls -l | awk '{print NF}' = number of feilds

-------------------

grep/egrep:

=> what is grep?
-> the grep command which stands for "global regualr expression print," processes text line by line and prints any lines which match a specified pattern

-> grep --version or grep --help = check version or help
-> grep keyword file =  search for a keyword from a file
-> grep -c keyword file = search for a keyword and count
-> grep -i Keyword file = search for a keyword ignore case-sensitive
-> grep -n keyword file = display the matched lines and their line numbers
-> grep -v keyword file = display everything but keyword
-> grep keyword file | awk '{print $1}' = search for a keyword and then only give the 1st feild
-> ls -l | grep Desktop = searc for a keyword and then only give the 1st feild

-> egrep -i "keyword|keyword2" file = search for 2 keywords.

-------------------
sort/uniq - Text processors commands:

=> what are sort and uniq commands?
-> sort command sorts in alphabetical order
-> uniq command filters out the repeated or duplicate lines

-> sort --version or sort --help = check version or help
-> sort file  = sorts file in alphabetical order
-> sort -r file = sort in reverse alphabetical order
-> sort -k2 file = sort by field number
-> uniq file = removes duplicates
-> sort file | uniq = always sort first before using uniq their line numbers
-> sort file | uniq -c = sort first then uniq and list count
-> sort file | uniq -d = only show repeated lines.

-----------------------
wc - text processors commands
=> what is wc command?
-> the command reads either standard input or a list of files and generates: newline count, word count, and byte count

-> wc --version or wc --help  = check version or help
-> wc file  = check file line count, word count and byte count
-> wc -l  = get the number of lines in a file
-> wc -w  = get the number of words in a file
-> wc -c  = get the number of bytes in a file
-> wc Directory = not allowed
-> ls -l | wc -l  = number of files
-> grep keyword | wc -l = number of keyword lines

--------------------------------------------------------------------------------------------------------------
Compare files:

superman-characters:
clark kent
lois lane
general zod

superman-characters2:
clark kent
lois lane
general peter

-> diff (line by line):
> diff file file1

-> cmp (byte by byte):
> cmp file file1
--------------------------------------------------------------------------------------------------------------
compress and un-compress files:

-> tar: takes bunch of files and zip them together.
most likely the tar files does not compress as musch as the actual gzip command
> tar cvf file path
> tar cvf ec2-user.tar .

> tar xvf file {which is used to extract every thing}


-> gzip: the gzip is the command is actually compresses a file by bytes size
> gzip file.tar
=> file.tar.gz

-> gzip -d or gunzip:  this command actually used to uncompress the file.
> gzip -d file.tar.gz
=> file.tar

--------------------------------------------------------------------------------------------------------------

Truncate file size (truncate)
-> the linux truncate command is often used to shrink or extend the size of a file to the specified size.

command:
-> truncate -s 10 filename
-> here 10 is what size we want, but by doing this words/ content gets cut, and when we increase the size also content will not be added.

--------------------------------------------------------------------------------------------------------------
Combining and spitting files:

-> multiple files can be combined into one and
-> one file can be split into multiple files

> cat file1 file2 file3 > file4
> split file4

e.g: split -l 300 file.txt childfile
> split -l 2 countries sep
-> split file.txt into 300 lines per file and output to childfileaa, childfileab and childfileac

--------------------------------------------------------------------------------------------------------------

linux vs windows commands?

Command Description               windows           linux

listing of a directory            dir               ls -l
rename a file                     ren               mv
copy a file                       copy              cp
move file                         move              mv
clear screen                      cls               clear
delete file                       del               rm
compare contents of files         fc                diff
search for word/string in a file  file              grep
display command help              command /?        man command
displays our location in the 
file system                       chdir             pwd
displays the time                 time              date












